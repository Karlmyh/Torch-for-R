install.packages("devtools")
library(devtools)
install_github(repo="ryantibs/best-subset", subdir="bestsubset")
install_github(repo="ryantibs/best-subset", subdir="bestsubset")
install.packages("slam")
install.packages('gurobi_9.1-0_R_4.0.2.tgz', repos=NULL)
library(devtools)
options(devtools.install.args = "--no-multiarch")
install_github(repo="ryantibs/best-subset", subdir="bestsubset")
library(devtools)
options(devtools.install.args = "--no-multiarch")
install_github(repo="ryantibs/best-subset", subdir="bestsubset")
install.packages("gurobi")
library(magrittr)
assert <- function(expression, error) {
if (!expression) {
stop(error, call. = FALSE)
}
}
normalize_x <- function(X) {
m <- dim(X)[2]
for (col_ind in seq_len(m)) {
ol <- X[, col_ind]
X[, col_ind] <- col / (sqrt(sum(col ^ 2)))
}
X
}
#Noise genarator based on signal noise ratio SNR = var(y)/sd^2
get_noise_from_snr <- function(y, snr){
sd <- sqrt(var(y) / snr)
rnorm(n = length(y), sd=sd)
}
create_identity_matrix <- function(p) {
diag(p)
}
#' Creates a function for generating synthetic examples.
#'
#' @param k0 number of nonzero betas
#'
create_synthetic_example_generator <- function(beta_gen_strategy, cov_matrix_gen_strategy) {
function(observations, p, snr=7) {
cov_matrix <- cov_matrix_gen_strategy(p)
cov_matrix_dim <- dim(cov_matrix)
assert(cov_matrix_dim[1] == cov_matrix_dim[2],
"cov_matrix should be a square matrix!")
mu <- rep(0, cov_matrix_dim[2])
X <- MASS::mvrnorm(n = observations, mu = mu, Sigma = cov_matrix)
# normalize cols
X <- normalize_x(X)
beta <- beta_gen_strategy(p = cov_matrix_dim[1])
noiseless_y <- X %*% beta
eps <- get_noise_from_snr(noiseless_y, snr)
y <- noiseless_y + eps
list(
X = X,
beta = beta,
eps = eps,
y = y
)
}
}
#' Example 1 generation
create_cov_matrix_gen_strategy <- function(ro) {
function(p) {
cov_matrix <- matrix(rep(0, p * p), nrow = p, ncol = p)
for (row in seq_len(p)) {
for (col in seq_len (p)) {
cov_matrix[row, col] <- abs(row - col)
}
}
ro ^ cov_matrix
}
}
beta_gen_strategy_example1 <- function(p) {
assert(p > 10, "Examples should have p larger than 10!")
k0 <- 10
one_inds <- seq(1, p, length.out = k0) %>% round()
beta <- rep(0, p)
beta[one_inds] <- 1
beta
}
#' Example 2 generation
beta_gen_strategy_example2 <- function(p) {
assert(p > 5, "Examples should have p larger than 5!")
c(rep(1, 5), rep(0, p - 5))
}
generate_fun_example2 <- create_synthetic_example_generator(
beta_gen_strategy = beta_gen_strategy_example2,
cov_matrix_gen_strategy = create_identity_matrix
)
#' Example 3 generation
beta_gen_strategy_example3 <- function(p) {
assert(p > 10, "Examples should have p larger than 10!")
c(0.5 + 9.5 * ((seq_len(10) - 1) / 10), rep(0, p - 10))
}
generate_fun_example3 <- create_synthetic_example_generator(
beta_gen_strategy = beta_gen_strategy_example3,
cov_matrix_gen_strategy = create_identity_matrix
)
#' Example 4 generation
beta_gen_strategy_example4 <- function(p) {
assert(p > 6, "Examples should have p larger than 10!")
c(-10, -6, -2, 2, 6, 10, rep(0, p - 6))
}
generate_fun_example4 <- create_synthetic_example_generator(
beta_gen_strategy = beta_gen_strategy_example4,
cov_matrix_gen_strategy = create_identity_matrix
)
## Examples generaton
create_problem_examples <- function(configs, example_generator) {
generate_problem_example <- function(config) {
example <- example_generator(
observations = config$observations,
p = config$p
)
list(
problem = example,
k = config$k
)
}
lapply(configs, generate_problem_example)
}
create_problem_examples_like_example1 <- function(configs) {
generate_problem_example <- function(config) {
cov_matrix_gen_strategy <- create_cov_matrix_gen_strategy(ro = config$ro)
example_generator <- create_synthetic_example_generator(
beta_gen_strategy = beta_gen_strategy_example1,
cov_matrix_gen_strategy = cov_matrix_gen_strategy
)
example <- example_generator(
observations = config$observations,
p = config$p,
snr = config$snr
)
list(
problem = example,
k = config$k,
snr = config$snr,
ro = config$ro
)
}
lapply(configs, generate_problem_example)
}
fixed_variables_changing_observations_example_config <- list(
"500 observations" = list(observations = 500, p = 40, k = 7),
"1500 observations" = list(observations = 1500, p = 40, k = 30),
"2500 observations" = list(observations = 2500, p = 40, k = 30),
"3500 observations" = list(observations = 3500, p = 40, k = 30),
"4500 observations" = list(observations = 4500, p = 40, k = 30)
)
fixed_observations_changing_variables_example_config <- list(
"10 variables" = list(observations = 5000, p = 10, k = 5),
"20 variables" = list(observations = 5000, p = 20, k = 10),
"30 variables" = list(observations = 5000, p = 30, k = 15)
)
precision_and_best_subset_examples_config <- list(
"ro=0.5, snr=1.58" = list(observations = 500, p = 100, k = 100, ro = 0.5, snr = 1.58),
"ro=0.5, snr=3.17" = list(observations = 500, p = 100, k = 100, ro = 0.5, snr = 3.17),
"ro=0.5, snr=6.33" = list(observations = 500, p = 100, k = 100, ro = 0.5, snr = 6.33),
"ro=0.8, snr=1.74" = list(observations = 500, p = 100, k = 100, ro = 0.8, snr = 1.74),
"ro=0.8, snr=3.48" = list(observations = 500, p = 100, k = 100, ro = 0.8, snr = 3.48),
"ro=0.8, snr=6.97" = list(observations = 500, p = 100, k = 100, ro = 0.8, snr = 6.97),
"ro=0.9, snr=2.18" = list(observations = 500, p = 100, k = 100, ro = 0.9, snr = 2.18),
"ro=0.9, snr=4.37" = list(observations = 500, p = 100, k = 100, ro = 0.9, snr = 4.37),
"ro=0.9, snr=8.73" = list(observations = 500, p = 100, k = 100, ro = 0.9, snr = 8.73)
)
examples <- list(
fixed_variables_changing_observations = create_problem_examples(
configs = fixed_variables_changing_observations_example_config,
example_generator = generate_fun_example2
),
fixed_observations_changing_variables = create_problem_examples(
configs = fixed_observations_changing_variables_example_config,
example_generator = generate_fun_example2
),
precision_and_best_subset_exmaple = create_problem_examples_like_example1(
configs = precision_and_best_subset_examples_config
)
)
col
microbenchmark
install.packages("microbenchmark")
install.packages("rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
Rcpp::sourceCpp('Desktop/统计计算/t.cpp')
source('~/Desktop/统计计算/Untitled.R', echo=TRUE)
source('~/Desktop/统计计算/Untitled.R', echo=TRUE)
sourceCpp("./t.cpp")
sourceCpp("t.cpp")
sourceCpp("./t.cpp")
sourceCpp(".\t.cpp")
source('~/Desktop/statisticalComputing/Untitled.R', echo=TRUE)
sourceCpp("./t.cpp")
sourceCpp(".\t.cpp")
sourceCpp(,".\t.cpp")
timesTwo
timesTwo(28)
source('~/Desktop/statisticalComputing/Untitled.R', echo=TRUE)
timesTwo(28)
maxCpp(20)
sourceCpp(,".\t.cpp")
maxCpp(20)
timesTwo(28)
source('~/Desktop/statisticalComputing/Untitled.R', echo=TRUE)
maxCpp(20)
sourceCpp(,".\t.cpp")
sourceCpp(,".\t.cpp")
library(Rcpp)
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
maxCpp(20)
sourceCpp(".\t.cpp")
maxCpp(c(1,2))
Rcpp::sourceCpp(".\t.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/t.cpp")
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
A=matrix(c(1,2,0,0),nrow = 2)
B=matrix(c(1,1,0,1),nrow = 2)
matrixMultiple(A,B)
A
matrixMultiple(A,B)
B=matrix(c(1,1,0,1),nrow = 2)
B
A*B
A
B
matrixMultiple(A,B)
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
matrixMultiple(A,B)
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
matrixMultiple(A,B)
install.packages("RcppArmadillo")
Rcpp::sourceCpp('Desktop/statisticalComputing/armadillo.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/t.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/armadillo.cpp')
library(RcppArmadillo)
sourceCpp("armadillo.cpp")
Rcpp::sourceCpp('Desktop/statisticalComputing/armadillo.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/Rcpp/armadillo.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/Rcpp/t.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/Rcpp/armadillo.cpp')
Rcpp::sourceCpp('Desktop/statisticalComputing/Rcpp/armadillo.cpp')
install.packages("https://cran.r-project.org/src/contrib/Archive/RcppArmadillo/RcppArmadillo_0.9.900.3.0.tar.gz", repos=NULL, type="source")
Rcpp::sourceCpp('Desktop/statisticalComputing/Rcpp/t.cpp')
source('~/Desktop/statisticalComputing/Rcpp/Untitled.R', echo=TRUE)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
remove.packages("RcppArmadillo")
install.packages("https://cran.r-project.org/src/contrib/Archive/RcppArmadillo/RcppArmadillo_0.9.900.3.0.tar.gz", repos=NULL, type="source")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
library(RcppArmadillo)
library(RcppArmadillo)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/t.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
source("~/Desktop/statisticalComputing/Rcpp/Untitled.R", echo=TRUE)
Rcpp
source("~/Desktop/statisticalComputing/Rcpp/Untitled.R", echo=TRUE)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
maxCpp(20)
A=matrix(c(1,2,0,0),nrow = 2)
B=matrix(c(1,1,0,1),nrow = 2)
matrixMultiple(A,B)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
init_mat(1,1,1)
init_mat(1,1,4)
source("~/Desktop/statisticalComputing/Rcpp/Untitled.R", echo=TRUE)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
A=init_mat(2,2,4)
B=init_mat(2,2,9)
mat_mulp_ew(A,B)
source("~/Desktop/statisticalComputing/Rcpp/Untitled.R", echo=TRUE)
mat_getRow
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/armadillo.cpp")
mat_getRow
source("~/Desktop/statisticalComputing/Rcpp/Untitled.R", echo=TRUE)
install.packages("MARSS")
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("Desktop/statisticalComputing/Rcpp/t.cpp")
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("/Users/mayuheng/Desktop/statisticalComputing/Rcpp/t.cpp")
Rcpp::sourceCpp("/Users/mayuheng/Desktop/statisticalComputing/Rcpp/armadillo.cpp")
maxCpp(20)
A=matrix(c(1,2,0,0),nrow = 2)
B=matrix(c(1,1,0,1),nrow = 2)
matrixMultiple(A,B)
A=init_mat(2,2,4)
B=init_mat(2,2,9)
mat_mulp_ew(A,B)
install.packages(c("devtools", "roxygen2", "usethis", "available"))
available::available("Coooool", browse = FALSE)
available::available("Coooool", browse = FALSE)
library(roxygen2)
source("~/Desktop/statisticalComputing/RMusicDown-main/R/music.R", echo=TRUE)
library(torch)
source("~/Documents/GitHub/Torch-for-R/model.R", echo=TRUE)
creat_model(c(3,4,5))
model<-creat_model(c(3,4,5))
model$linear0
sum(model$linear0)
sum(model$linear0).item()
sum(model$linear0)$item
sum(model$linear0)$item()
model$linear0
sum(abs(model$linear0))$item()
sum(abs(model$linear0)**2)$item()
model$linear0
model$linear0[1]
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/data.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/data.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/data.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/data.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
clear()
clc()
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
x_train
dim(x_train)
nrow(x_train)
class(x_train)
len(x_train)
length(x_train)
x_train[1]
nrow(x_train[1])
class(x_train[1])
x_train[1][1]
class(x_train[1][1])
class(x_train[[1]])
x_train[[1]]
nrow(x_train[[1]])
ncol(x_train[[1]])
torch_tensor()
x_train[[1]]
nrow(x_train[[1]])
torch_tensor(x_train[[1]])
torch_tensor(x_train[[1]],n=-1)
torch_tensor(x_train[[1]])
x_train[[1]] %<% torch_tensor
x_train[[1]] %>% torch_tensor
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
gc()
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
nn_smooth_l1_loss(model$linear0)
model$linear0
nn_smooth_l1_loss(model$linear0)$item()
source("~/Documents/GitHub/Torch-for-R/train.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
model$linear0 %>% length()
model$linear0 %>% length
c(0)*1--
1
c(0)*100
rep(0,10)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
y_pred
model$linear0
model$linear0 %>% astype()
torch_tensor(2, dtype = torch_double())
torch_tensor(2, dtype = torch_float())
torch_tensor(2, dtype = torch_float())
model$linear0$dtype
model$linear0$dtype()
model$linear0$dtype
model$linear0$type_as
model$linear0$type_as(torch_float())
model$linear0$type_as(torch_float
)
torch_tensor(model$linear0,dtype = torch_float())
model$linear0%>% torch_tensor(dtype = torch_float())
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
model$linear0$item()
model$linear0$item
model$linear0
c(model$linear0)
c(model$linear0)
as_array(model$linear0)
as_array(model$linear0)>1
as.integer()
as.integer(as_array(model$linear0)>1)
as.integer(as_array(model$linear0)>1)
as.integer(as_array(model$linear0)>1)==as.integer(as_array(model$linear0)>1)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$parameters[1]
abs(model$parameters[1])
(model$parameters[1])**2
class(model$parameters[1])
class(model$parameters[[1]])
(model$parameters[[1]])
(model$parameters[[1]])**2
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
install.packages("tune", repos = "http://cran.r-project.org") #or your local mirror
install.packages("tune", repos = "http://cran.r-project.org")
install.packages("tune", repos = "http://cran.r-project.org")
install.packages("tune", repos = "http://cran.r-project.org")
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$parameters
class(model$parameters)
class(model$parameters[[1]])
list.append
model$parameters.append(1)
model$parameters.append(model$linear0)
append(model$parameters,model$linear0)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
nn_linear(torch_randn(layer_width[1],requires_grad = TRUE))
torch_eye(layer_width[1])
torch_masked_select
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
model$linear0$grad
source("~/Documents/GitHub/Torch-for-R/train.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0$grad
source("~/Documents/GitHub/Torch-for-R/train.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
source("~/Documents/GitHub/Torch-for-R/experiment.R", echo=TRUE)
model$linear0
